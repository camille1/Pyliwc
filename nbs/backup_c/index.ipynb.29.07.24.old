{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Welcome to `pyliwc`\n",
    "\n",
    "> *Linguistic Inquiry and Word Count* in Python"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Overview"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`PyLIWC` is a Python package designed to provide an interface for analyzing text using the LIWC (Linguistic Inquiry and Word Count) tool. This package allows users to interact with the LIWC CLI from within Python, offering features for processing various data formats, performing linguistic style matching, and analyzing narrative arcs in text data. It can handle folders, text files or `Pandas` dataframes.\n",
    "\n",
    "As the LIWC dictionary is proprietary software, this requires that you have installed the latest version of the LIWC software on your machine, with an activated licence (academic licence).\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Manifest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The LIWC (Linguistic Inquiry and Word Count) software by James W. Pennebaker, Roger J. Booth, and Martha E. Francis has been instrumental for countless researchers in analyzing linguistic and psycholinguistic data. Linguistic Inquiry and Word Count (LIWC) is the gold standard of dictionary-based approaches for analyzing word use. It can be used to study a single individual, groups of people over time, or all of social media.However, LIWC has traditionally been available through software, necessitating the usage of an outside software to the Python environement.\n",
    "\n",
    "Recognizing the growing popularity of Python in the scientific and research community, I developed an open-source library, `pyliwc`, which brings (many of) the functionality of LIWC to a wider audience without the need  use the LIWC application as GUI. `pyliwc` is open-source, released under the MIT license, and is designed to enable researchers to perform sophisticated linguistic analysis directly in Python."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The package offers a wide range of features, including:\n",
    "\n",
    "1. **LIWC Text Analysis:**\n",
    "\n",
    "- Analyze text data from various sources, including CSV files, directories, Pandas DataFrames, and individual strings.\n",
    "- Supports internal dictionaries (e.g., LWIC22, LIWC2015) as well as adhoc dictionaries\n",
    "- Output results directly in a convenient Pandas DataFrame for easy integration with other data processing tools.\n",
    "\n",
    "2. **Linguistic Style Matching (LSM):**\n",
    "\n",
    "- Perform person and group-level LSM analysis using a DataFrame to evaluate the alignment of linguistic styles in conversational data.\n",
    "- Supports pairwise LSM calculations for detailed analysis of interpersonal communication dynamics.\n",
    "\n",
    "3. **Narrative Arc Analysis:**\n",
    "\n",
    "- Analyze the narrative arc of text data to understand staging, progression, and cognitive tension, offering deep insights into storytelling elements.\n",
    "- Graphics capabilities are included, allowing users to visualize narrative structures: staging, plot progression, and cognitive tension over time.\n",
    "- Provides customizable scaling methods and segment options for precise control over the analysis process.\n",
    "\n",
    "4. **Integration with LIWC CLI:** Seamlessly execute LIWC commands and capture output for further processing, leveraging the full power of LIWC's linguistic analysis capabilities.\n",
    "Multithreading support for improved performance and faster analysis across large datasets.\n",
    "\n",
    "5. **Output Options:** Flexible output formats, including CSV, JSON, and direct integration with Pandas DataFrames, ensuring compatibility with a wide range of data analysis workflows.\n",
    "\n",
    "\n",
    "\n",
    "** **\n",
    "**Missing Features:**\n",
    "In the current version, the following features have not yet been ported : Word frequencies, Meaning extraction and Contextualizer.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Installation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can install `pyliwc` via pip or conda, which are popular package management systems for Python.\n",
    "Here are the instructions for both methods:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Requirements :\n",
    "* Python 3.6 or above\n",
    "* LIWC software\n",
    "\n",
    "**Using pip**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sh\n",
    "pip install pyliwc\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Or using Conda**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```sh\n",
    "conda install -c pyliwc\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Quickstart**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's a quickstart guide, explaining how to use `pyliwc` perform text analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Analyze a string using the default dictionary (LIWC22)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8\n"
     ]
    }
   ],
   "source": [
    "from pyliwc import Liwc\n",
    "\n",
    "liwc = Liwc('LIWC-22-cli.exe')\n",
    "\n",
    "text = \"This is a sample text for LIWC analysis.\"\n",
    "\n",
    "r = liwc.analyze_string_to_json(text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "{\n",
    "    'Segment': 1,\n",
    "    'WC': 8,\n",
    "    'Analytic': 89.52,\n",
    "    'Clout': 40.06,\n",
    "    'Authentic': 15.38,\n",
    "    'Tone': 20.23,\n",
    "    'WPS': 8,\n",
    "    'BigWords': 12.5,\n",
    "    'Dic': 100,\n",
    "    'Linguistic': 62.5,\n",
    "    'function': 50,\n",
    "    'pronoun': 12.5,\n",
    "    'ppron': 0,\n",
    "    'i': 0,\n",
    "    'we': 0,\n",
    "    'you': 0,\n",
    "    ... ,\n",
    "    'AllPunc': 12.5,\n",
    "    'Period': 12.5,\n",
    "    'Comma': 0,\n",
    "    'QMark': 0,\n",
    "    'Exclam': 0,\n",
    "    'Apostro': 0,\n",
    "    'OtherP': 0,\n",
    "    'Emoji': 0\n",
    "}\n",
    "\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Analyzing Texts from a `pandas` DataFrame**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv('../data/US-president.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Segment</th>\n",
       "      <th>WC</th>\n",
       "      <th>Analytic</th>\n",
       "      <th>Clout</th>\n",
       "      <th>Authentic</th>\n",
       "      <th>Tone</th>\n",
       "      <th>WPS</th>\n",
       "      <th>BigWords</th>\n",
       "      <th>Dic</th>\n",
       "      <th>Linguistic</th>\n",
       "      <th>...</th>\n",
       "      <th>nonflu</th>\n",
       "      <th>filler</th>\n",
       "      <th>AllPunc</th>\n",
       "      <th>Period</th>\n",
       "      <th>Comma</th>\n",
       "      <th>QMark</th>\n",
       "      <th>Exclam</th>\n",
       "      <th>Apostro</th>\n",
       "      <th>OtherP</th>\n",
       "      <th>Emoji</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Row ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1592</td>\n",
       "      <td>52.22</td>\n",
       "      <td>93.17</td>\n",
       "      <td>34.71</td>\n",
       "      <td>79.12</td>\n",
       "      <td>16.58</td>\n",
       "      <td>22.49</td>\n",
       "      <td>91.21</td>\n",
       "      <td>66.46</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14.20</td>\n",
       "      <td>5.97</td>\n",
       "      <td>6.53</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0</td>\n",
       "      <td>0.63</td>\n",
       "      <td>1.01</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2389</td>\n",
       "      <td>51.22</td>\n",
       "      <td>95.37</td>\n",
       "      <td>36.07</td>\n",
       "      <td>54.01</td>\n",
       "      <td>20.25</td>\n",
       "      <td>19.21</td>\n",
       "      <td>90.37</td>\n",
       "      <td>68.48</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12.98</td>\n",
       "      <td>5.11</td>\n",
       "      <td>6.20</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0.54</td>\n",
       "      <td>1.13</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1457</td>\n",
       "      <td>46.94</td>\n",
       "      <td>98.19</td>\n",
       "      <td>42.58</td>\n",
       "      <td>82.46</td>\n",
       "      <td>16.19</td>\n",
       "      <td>21.89</td>\n",
       "      <td>91.08</td>\n",
       "      <td>66.78</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>15.31</td>\n",
       "      <td>6.18</td>\n",
       "      <td>7.28</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.10</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2548</td>\n",
       "      <td>43.37</td>\n",
       "      <td>91.33</td>\n",
       "      <td>50.66</td>\n",
       "      <td>45.63</td>\n",
       "      <td>15.35</td>\n",
       "      <td>17.39</td>\n",
       "      <td>93.21</td>\n",
       "      <td>71.15</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19.66</td>\n",
       "      <td>6.28</td>\n",
       "      <td>9.11</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0</td>\n",
       "      <td>1.69</td>\n",
       "      <td>2.20</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 119 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Segment    WC  Analytic  Clout  Authentic   Tone    WPS  BigWords  \\\n",
       "Row ID                                                                      \n",
       "0             1  1592     52.22  93.17      34.71  79.12  16.58     22.49   \n",
       "1             1  2389     51.22  95.37      36.07  54.01  20.25     19.21   \n",
       "2             1  1457     46.94  98.19      42.58  82.46  16.19     21.89   \n",
       "3             1  2548     43.37  91.33      50.66  45.63  15.35     17.39   \n",
       "\n",
       "          Dic  Linguistic  ...  nonflu  filler  AllPunc  Period  Comma  QMark  \\\n",
       "Row ID                     ...                                                  \n",
       "0       91.21       66.46  ...       0       0    14.20    5.97   6.53   0.06   \n",
       "1       90.37       68.48  ...       0       0    12.98    5.11   6.20   0.00   \n",
       "2       91.08       66.78  ...       0       0    15.31    6.18   7.28   0.00   \n",
       "3       93.21       71.15  ...       0       0    19.66    6.28   9.11   0.39   \n",
       "\n",
       "        Exclam  Apostro  OtherP  Emoji  \n",
       "Row ID                                  \n",
       "0            0     0.63    1.01      0  \n",
       "1            0     0.54    1.13      0  \n",
       "2            0     0.75    1.10      0  \n",
       "3            0     1.69    2.20      0  \n",
       "\n",
       "[4 rows x 119 columns]"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pyliwc import Liwc\n",
    "\n",
    "liwc = Liwc('LIWC-22-cli.exe')\n",
    "\n",
    "liwc.analyze_df(df.Text, liwc_dict=\"LIWC22\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Change to other dictionary: \"LIWC2015\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Segment</th>\n",
       "      <th>WC</th>\n",
       "      <th>Analytic</th>\n",
       "      <th>Clout</th>\n",
       "      <th>Authentic</th>\n",
       "      <th>Tone</th>\n",
       "      <th>WPS</th>\n",
       "      <th>Sixltr</th>\n",
       "      <th>Dic</th>\n",
       "      <th>function</th>\n",
       "      <th>...</th>\n",
       "      <th>Colon</th>\n",
       "      <th>SemiC</th>\n",
       "      <th>QMark</th>\n",
       "      <th>Exclam</th>\n",
       "      <th>Dash</th>\n",
       "      <th>Quote</th>\n",
       "      <th>Apostro</th>\n",
       "      <th>Parenth</th>\n",
       "      <th>OtherP</th>\n",
       "      <th>Emoji</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Row ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1592</td>\n",
       "      <td>65.12</td>\n",
       "      <td>92.38</td>\n",
       "      <td>30.27</td>\n",
       "      <td>89.13</td>\n",
       "      <td>16.58</td>\n",
       "      <td>22.49</td>\n",
       "      <td>89.38</td>\n",
       "      <td>53.33</td>\n",
       "      <td>...</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.38</td>\n",
       "      <td>0.06</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.25</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2389</td>\n",
       "      <td>64.97</td>\n",
       "      <td>93.13</td>\n",
       "      <td>33.34</td>\n",
       "      <td>74.15</td>\n",
       "      <td>20.25</td>\n",
       "      <td>19.21</td>\n",
       "      <td>87.57</td>\n",
       "      <td>55.04</td>\n",
       "      <td>...</td>\n",
       "      <td>0.13</td>\n",
       "      <td>0.21</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0.63</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0.54</td>\n",
       "      <td>0</td>\n",
       "      <td>0.08</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1457</td>\n",
       "      <td>57.63</td>\n",
       "      <td>96.73</td>\n",
       "      <td>40.07</td>\n",
       "      <td>87.87</td>\n",
       "      <td>16.19</td>\n",
       "      <td>21.89</td>\n",
       "      <td>87.99</td>\n",
       "      <td>53.12</td>\n",
       "      <td>...</td>\n",
       "      <td>0.55</td>\n",
       "      <td>0.34</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0.07</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.75</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>2548</td>\n",
       "      <td>58.30</td>\n",
       "      <td>91.76</td>\n",
       "      <td>44.26</td>\n",
       "      <td>62.24</td>\n",
       "      <td>15.35</td>\n",
       "      <td>17.39</td>\n",
       "      <td>90.07</td>\n",
       "      <td>55.42</td>\n",
       "      <td>...</td>\n",
       "      <td>0.90</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0.39</td>\n",
       "      <td>0</td>\n",
       "      <td>0.16</td>\n",
       "      <td>0.63</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0</td>\n",
       "      <td>0.12</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 95 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Segment    WC  Analytic  Clout  Authentic   Tone    WPS  Sixltr  \\\n",
       "Row ID                                                                    \n",
       "0             1  1592     65.12  92.38      30.27  89.13  16.58   22.49   \n",
       "1             1  2389     64.97  93.13      33.34  74.15  20.25   19.21   \n",
       "2             1  1457     57.63  96.73      40.07  87.87  16.19   21.89   \n",
       "3             1  2548     58.30  91.76      44.26  62.24  15.35   17.39   \n",
       "\n",
       "          Dic  function  ...  Colon  SemiC  QMark  Exclam  Dash  Quote  \\\n",
       "Row ID                   ...                                             \n",
       "0       89.38     53.33  ...   0.38   0.38   0.06       0  0.00   0.25   \n",
       "1       87.57     55.04  ...   0.13   0.21   0.00       0  0.63   0.08   \n",
       "2       87.99     53.12  ...   0.55   0.34   0.00       0  0.07   0.14   \n",
       "3       90.07     55.42  ...   0.90   0.39   0.39       0  0.16   0.63   \n",
       "\n",
       "        Apostro  Parenth  OtherP  Emoji  \n",
       "Row ID                                   \n",
       "0          0.63        0    0.00      0  \n",
       "1          0.54        0    0.08      0  \n",
       "2          0.75        0    0.00      0  \n",
       "3          1.69        0    0.12      0  \n",
       "\n",
       "[4 rows x 95 columns]"
      ]
     },
     "execution_count": null,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "liwc_dict = \"LIWC2015\" \n",
    "\n",
    "liwc.analyze_df(df.Text, liwc_dict=liwc_dict)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **How to use**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`Liwc` is the main class for interacting with the LIWC CLI.\n",
    "\n",
    "```python \n",
    "liwc = Liwc(liwc_cli_path='LIWC-22-cli', threads=None, verbose=True) \n",
    "```\n",
    "\n",
    "**Parameters**:\n",
    "- liwc_cli_path (str): Path to the LIWC CLI executable. Default is 'LIWC-22-cli'. On WSL, it is required to add .exe at the end 'LIWC-22-cli.exe',\n",
    "- threads (int, optional): Number of threads to use. Defaults to the number of CPU cores minus one.\n",
    "- verbose (bool, optional): If True, display printing such as progress bar for large files. Defaults to False."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The main Class of `Pyliwc` is `Liwc`.\n",
    "<div class=\"alert alert-info\">Note: Make sure that you have `LIWC-22` software running on your computer — it is required for using all methods</div>\n",
    "\n",
    "<!-- ![liwc22_interface.jpg](images/liwc22_interface.jpg) -->\n",
    "<img src=\"images/liwc22_interface.jpg\" width=\"350\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Methods"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### LIWC analyze"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`analyze_df`\n",
    "\n",
    "Analyze text data from a Pandas DataFrame using LIWC.\n",
    "\n",
    "```python\n",
    "\n",
    "from pyliwc import Liwc\n",
    "\n",
    "liwc = Liwc('LIWC-22-cli.exe')\n",
    "\n",
    "\n",
    "result_df = liwc.analyze_df(text_df, return_input=False, liwc_dict='LIWC22')\n",
    "\n",
    "```\n",
    "\n",
    "**Example**\n",
    "\n",
    "\n",
    "```python\n",
    "import pandas as pd\n",
    "data = {'Text': [\"I am happy\", \"I feel sad today\"]}\n",
    "df = pd.DataFrame(data)\n",
    "result_df = liwc.analyze_df(df.Text)\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`analyze_csv`\n",
    "\n",
    "Analyze text data from a CSV file using LIWC.\n",
    "\n",
    "```python\n",
    "liwc.analyze_csv(input_file, output_location, row_id_indices, column_indices, liwc_dict='LIWC22')\n",
    "\n",
    "```\n",
    "\n",
    "**Example**\n",
    "\n",
    "\n",
    "```python\n",
    "liwc.analyze_csv(\"input.csv\", \"output.csv\", \"0\", \"1\")\n",
    "\n",
    "```\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`analyze_folder`\n",
    "\n",
    "Analyze all text files in a specified folder using LIWC.\n",
    "\n",
    "```python\n",
    "liwc.analyze_folder(input_folder, output_location, liwc_dict='LIWC22')\n",
    "\n",
    "```\n",
    "\n",
    "**Example**\n",
    "\n",
    "\n",
    "```python\n",
    "liwc.analyze_folder('D:/Downloads/texts_folder', 'D:/Downloads')\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`analyze_string`\n",
    "\n",
    "Analyze a single string using LIWC.\n",
    "\n",
    "```python\n",
    "liwc.analyze_string(input_string, output_location, liwc_dict='LIWC22')\n",
    "\n",
    "```\n",
    "\n",
    "**Example**\n",
    "\n",
    "\n",
    "```python\n",
    "liwc.analyze_string(\"I am feeling great\", \"D:/Downloads\")\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`analyze_string_to_json`\n",
    "\n",
    "Analyze a single string and return the result as a JSON object.\n",
    "\n",
    "```python\n",
    "liwc.analyze_string_to_json(input_string, liwc_dict='LIWC22')\n",
    "\n",
    "```\n",
    "\n",
    "**Example**\n",
    "\n",
    "\n",
    "```python\n",
    "result = liwc.analyze_string_to_json(\"This is an example string\")\n",
    "print(result)\n",
    "\n",
    "{'Segment': 1, 'WC': 5, 'Analytic': 39.7, 'Clout': 40.06, 'Authentic': 1, 'Tone': 20.23, 'WPS': 5, 'BigWords': 20, 'Dic': 60, 'Linguistic': 60, 'function': 60, 'pronoun': 20, 'ppron': 0, 'i': 0, 'we': 0, 'you': 0, 'shehe': 0, 'they': 0, 'ipron': 20, 'det': 40, 'article': 20, 'number': 0, 'prep': 0, 'auxverb': 20, 'adverb': 0, 'conj': 0, 'negate': 0, 'verb': 20, 'adj': 0, 'quantity': 0, 'Drives': 0, 'affiliation': 0, 'achieve': 0, 'power': 0, 'Cognition': 0, 'allnone': 0, 'cogproc': 0, 'insight': 0, 'cause': 0, 'discrep': 0, 'tentat': 0, 'certitude': 0, 'differ': 0, 'memory': 0, 'Affect': 0, 'tone_pos': 0, 'tone_neg': 0, 'emotion': 0, 'emo_pos': 0, 'emo_neg': 0, 'emo_anx': 0, 'emo_anger': 0, 'emo_sad': 0, 'swear': 0, 'Social': 0, 'socbehav': 0, 'prosocial': 0, 'polite': 0, 'conflict': 0, 'moral': 0, 'comm': 0, 'socrefs': 0, 'family': 0, 'friend': 0, 'female': 0, 'male': 0, 'Culture': 0, 'politic': 0, 'ethnicity': 0, 'tech': 0, 'Lifestyle': 0, 'leisure': 0, 'home': 0, 'work': 0, 'money': 0, 'relig': 0, 'Physical': 0, 'health': 0, 'illness': 0, 'wellness': 0, 'mental': 0, 'substances': 0, 'sexual': 0, 'food': 0, 'death': 0, 'need': 0, 'want': 0, 'acquire': 0, 'lack': 0, 'fulfill': 0, 'fatigue': 0, 'reward': 0, 'risk': 0, 'curiosity': 0, 'allure': 0, 'Perception': 0, 'attention': 0, 'motion': 0, 'space': 0, 'visual': 0, 'auditory': 0, 'feeling': 0, 'time': 0, 'focuspast': 0, 'focuspresent': 20, 'focusfuture': 0, 'Conversation': 0, 'netspeak': 0, 'assent': 0, 'nonflu': 0, 'filler': 0, 'AllPunc': 0, 'Period': 0, 'Comma': 0, 'QMark': 0, 'Exclam': 0, 'Apostro': 0, 'OtherP': 0, 'Emoji': 0}\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Language Style Matching\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This method allows the analysis of linguistic style matching, focusing on person and group-level analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`analyze_lsm`\n",
    "\n",
    "Perform LSM analysis on a DataFrame.\n",
    "\n",
    "```python\n",
    "\n",
    "liwc.analyze_lsm(df, calculate_lsm='person-and-group', group_column='GroupID', person_column='PersonID', text_column='Text', output_type='pairwise', expanded_output=False, omit_speakers_number_of_turns=0, omit_speakers_word_count=10, segmentation='none')\n",
    "\n",
    "```\n",
    "\n",
    "**Example**\n",
    "\n",
    "\n",
    "```python\n",
    "liwc = Liwc('LIWC-22-cli.exe')\n",
    "import pandas as pd\n",
    "\n",
    "# Example DataFrame\n",
    "data = {\n",
    "    'GroupID': [1, 1, 2, 2],\n",
    "    'PersonID': [101, 102, 201, 202],\n",
    "    'Text': [\"I like apples\",\n",
    "             \"He enjoys oranges\",\n",
    "             \"They eat bananas\",\n",
    "             \"We love grapes\"]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "lsm_result = liwc.analyze_lsm(df,\n",
    "                              calculate_lsm=\"pairwise\",  \n",
    "                              person_column='PersonID',\n",
    "                              group_column='GroupID',\n",
    "                              text_column='Text',\n",
    "                              omit_speakers_word_count=1)\n",
    "```\n",
    "\n",
    "```python\n",
    "# Group level\n",
    "lsm_result['group_level']\n",
    "\n",
    "```\n",
    "\n",
    "<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>GroupID</th>\\n      <th>Segment</th>\\n      <th>LSM</th>\\n      <th>WC.Total</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>0.88</td>\\n      <td>6</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>1.00</td>\\n      <td>6</td>\\n    </tr>\\n  </tbody>\\n</table>\n",
    "\n",
    "```python\n",
    "# Person level\n",
    "lsm_result['person_level']\n",
    "```\n",
    "\n",
    "<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>GroupID</th>\\n      <th>Segment</th>\\n      <th>Person.1</th>\\n      <th>Person.2</th>\\n      <th>LSM</th>\\n      <th>WC.Person.1</th>\\n      <th>WC.Person.2</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1</td>\\n      <td>1</td>\\n      <td>101</td>\\n      <td>102</td>\\n      <td>0.88</td>\\n      <td>3</td>\\n      <td>3</td>\\n    </tr>\\n    <tr>\\n      <th>1</th>\\n      <td>2</td>\\n      <td>1</td>\\n      <td>201</td>\\n      <td>202</td>\\n      <td>1.00</td>\\n      <td>3</td>\\n      <td>3</td>\\n    </tr>\\n  </tbody>\\n</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Narrative arc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Narrative Arc Analysis feature provides insights into the narrative structure of texts by breaking them down into key components such as Staging, Plot Progression, and Cognitive Tension. This is particularly useful for understanding the flow and development of stories or articles. Here's a closer look at how it works:\n",
    "\n",
    "**How It Works**\n",
    "\n",
    "1. Text Segmentation:\n",
    "\n",
    "    - The text is divided into multiple segments, and each segment is analyzed separately.\n",
    "    \n",
    "    - You can control the number of segments using the segments_number parameter.\n",
    "\n",
    "\n",
    "2. Components Analysis:\n",
    "\n",
    "    - **Staging**: This measures how much information is being set up at various points in the text.\n",
    "    - **Plot Progression**: This reflects the movement and development of the narrative.\n",
    "    - **Cognitive Tension**: This captures the emotional or psychological tension present in the text.\n",
    "\n",
    "3. Scaling Methods:\n",
    "Two scaling methods are available:\n",
    "      \n",
    "    - `0-100`: Values are scaled between 0 and 100 for easy comparison.\n",
    "    - `Z-score`: Standardizes scores based on mean and standard deviation.\n",
    "\n",
    "  \n",
    "4. Output Options:\n",
    "\n",
    "    - Choose whether to output individual data points for each segment or aggregate the data.\n",
    "    - Filter out texts with word counts below a specified threshold using skip_wc.\n",
    "    Function Usage\n",
    "\n",
    "\n",
    "Here is a breakdown of the narrative_arc function, which conducts the analysis:\n",
    "\n",
    "`narrative_arc`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "\n",
    "\n",
    "\n",
    "narrative_arc(\n",
    "    df=df, \n",
    "    column_names=['Text'], \n",
    "    output_individual_data_points=True, \n",
    "    scaling_method='0-100', \n",
    "    segments_number=5, \n",
    "    skip_wc=10\n",
    ")\n",
    "\n",
    "```\n",
    "\n",
    "**Example**\n",
    "\n",
    "```python\n",
    "\n",
    "from pyliwc import Liwc\n",
    "import pandas as pd\n",
    "\n",
    "liwc = Liwc('LIWC-22-cli.exe')\n",
    "\n",
    "df = pd.DataFrame({\n",
    "    'Text': [\"\"\"\n",
    "Once upon a time, in a land far away, there lived a young prince named Elior who was born without the ability to speak. One day, a wise inventor arrived at the castle with an AI device that could translate thoughts into speech. The prince accepted the device and, to everyone's amazement, his unspoken words became a beautiful voice. The entire kingdom rejoiced as Elior expressed his wisdom and compassion. With the power of AI, he not only found his voice but also united his people. Thus, the prince and his kingdom thrived, forever grateful for the miracle of technology.\"\"\"\n",
    "    ]\n",
    "})\n",
    "\n",
    "\n",
    "narrative_results = liwc_analyzer.narrative_arc(\n",
    "    df=df, \n",
    "    column_names=['Text'], \n",
    "    output_individual_data_points=True, \n",
    "    scaling_method='0-100', \n",
    "    segments_number=5, \n",
    "    skip_wc=10\n",
    ")\n",
    "\n",
    "```\n",
    "\n",
    "```python\n",
    "\n",
    "narrative_results\n",
    "\n",
    "```\n",
    "<table border=\"1\" class=\"dataframe\">\\n  <thead>\\n    <tr style=\"text-align: right;\">\\n      <th></th>\\n      <th>Row ID</th>\\n      <th>WC</th>\\n      <th>Narrativity_Overall</th>\\n      <th>Narrativity_Staging</th>\\n      <th>Narrativity_PlotProg</th>\\n      <th>Narrativity_CogTension</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr>\\n      <th>0</th>\\n      <td>1</td>\\n      <td>100</td>\\n      <td>47.6</td>\\n      <td>81.09</td>\\n      <td>16.17</td>\\n      <td>45.54</td>\\n    </tr>\\n  </tbody>\\n</table>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "liwc = Liwc('LIWC-22-cli.exe')\n",
    "\n",
    "df = pd.DataFrame({\n",
    "    'Text': [\"\"\"\n",
    "Once upon a time, in a land far away, there lived a young prince named Elior who was born without the ability to speak. One day, a wise inventor arrived at the castle with an AI device that could translate thoughts into speech. The prince accepted the device and, to everyone's amazement, his unspoken words became a beautiful voice. The entire kingdom rejoiced as Elior expressed his wisdom and compassion. With the power of AI, he not only found his voice but also united his people. Thus, the prince and his kingdom thrived, forever grateful for the miracle of technology.\"\"\"\n",
    "    ]\n",
    "})\n",
    "\n",
    "\n",
    "narrative_results = liwc.narrative_arc(\n",
    "    df=df, \n",
    "    column_names=['Text'], \n",
    "    output_individual_data_points=True, \n",
    "    scaling_method='0-100', \n",
    "    segments_number=5, \n",
    "    skip_wc=10\n",
    ")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plotting the Narrative Arc\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To visually represent the narrative arc, you can use the plot_narrative_arc method:\n",
    "\n",
    "Note: `output_individual_data_points` must be set to `True` in `narrative_arc` to plot the results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```python\n",
    "\n",
    "from pyliwc import Liwc\n",
    "import pandas as pd\n",
    "\n",
    "liwc = Liwc('LIWC-22-cli.exe')\n",
    "\n",
    "df = pd.DataFrame({\n",
    "    'Text': [\"\"\"\n",
    "Once upon a time, in a land far away, there lived a young prince named Carlo who was born without the ability to speak.\n",
    "One day, a wise inventor arrived at the castle with an AI device that could translate thoughts into speech. \n",
    "The prince accepted the device and, to everyone's amazement, his unspoken words became a beautiful voice. \n",
    "The entire kingdom rejoiced as Elior expressed his wisdom and compassion.\n",
    "With the power of AI, he not only found his voice but also united his people. \n",
    "Thus, the prince and his kingdom thrived, forever grateful for the miracle of technology.\"\"\"\n",
    "    ]\n",
    "})\n",
    "\n",
    "\n",
    "narrative_results = liwc.narrative_arc(\n",
    "    df=df, \n",
    "    column_names=['Text'], \n",
    "    output_individual_data_points=True, \n",
    "    scaling_method='0-100', \n",
    "    skip_wc=10\n",
    ")\n",
    "\n",
    "#  Plot the Narrative Arc\n",
    "\n",
    "fig = liwc.plot_narrative_arc(narrative_results)\n",
    "fig\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"images/narrative_arc.svg\" width=\"100%\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
